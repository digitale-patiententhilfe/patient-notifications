// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Patient model - extends User with healthcare-specific fields
model Patient {
    id                String                   @id @default(cuid())
    userId            String                   @unique
    user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    timezone          String                   @default("UTC")
    phoneNumber       String?
    notificationPrefs NotificationPreference[]
    appointments      Appointment[]
    notifications     Notification[]
    createdAt         DateTime                 @default(now())
    updatedAt         DateTime                 @updatedAt

    @@index([userId])
}

// User notification preferences per type and channel
model NotificationPreference {
    id               String           @id @default(cuid())
    patientId        String
    patient          Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
    notificationType NotificationType
    channelType      ChannelType
    enabled          Boolean          @default(true)
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt

    @@unique([patientId, notificationType, channelType])
    @@index([patientId])
}

// Medical appointments
model Appointment {
    id              String            @id @default(cuid())
    patientId       String
    patient         Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
    scheduledAt     DateTime
    status          AppointmentStatus @default(SCHEDULED)
    appointmentType String
    doctorName      String
    location        String?
    notes           String?
    notifications   Notification[]
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt

    @@index([patientId])
    @@index([scheduledAt])
    @@index([status])
}

// Notification records with delivery tracking
model Notification {
    id               String             @id @default(cuid())
    patientId        String
    patient          Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
    appointmentId    String?
    appointment      Appointment?       @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
    notificationType NotificationType
    channelType      ChannelType
    status           NotificationStatus @default(PENDING)
    scheduledFor     DateTime
    sentAt           DateTime?
    deliveredAt      DateTime?
    failedAt         DateTime?
    errorMessage     String?
    retryCount       Int                @default(0)
    maxRetries       Int                @default(3)
    content          String // JSON stringified content
    metadata         String? // JSON for additional data
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt

    @@index([patientId])
    @@index([status])
    @@index([scheduledFor])
    @@index([appointmentId])
}

// Reusable notification templates with variable interpolation
model NotificationTemplate {
    id               String           @id @default(cuid())
    notificationType NotificationType
    channelType      ChannelType
    subject          String? // For email
    bodyTemplate     String // Supports {{variable}} interpolation
    variables        String // JSON array of required variables
    isActive         Boolean          @default(true)
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt

    @@unique([notificationType, channelType])
}

enum NotificationType {
    APPOINTMENT_REMINDER
    APPOINTMENT_CONFIRMATION
    APPOINTMENT_CANCELLATION
    APPOINTMENT_RESCHEDULED
    TEST_RESULTS_READY
    PRESCRIPTION_READY
}

enum ChannelType {
    EMAIL
    SMS
    IN_APP
}

enum AppointmentStatus {
    SCHEDULED
    CONFIRMED
    CANCELLED
    COMPLETED
    NO_SHOW
}

enum NotificationStatus {
    PENDING
    SCHEDULED
    SENDING
    SENT
    DELIVERED
    FAILED
    CANCELLED
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    patient       Patient?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
